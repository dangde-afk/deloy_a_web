# # This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# name: Java CI with Maven

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up JDK 17
#       uses: actions/setup-java@v4
#       with:
#         java-version: '17'
#         distribution: 'temurin'
#         cache: maven
#     - name: Build with Maven
#       run: mvn -B package --file pom.xml
    
#       #set output
#     - name: Set output
#       run: echo "version=1.0.0" >> $GITHUB_OUTPUT
#       id: example

#     # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#     - name: Update dependency graph
#       uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

#     # Optional: Uploads the dependency snapshot to GitHub to improve the quality of Dependabot alerts this repository can receive
#     - name: Submit dependency snapshot
#       run: |
#         curl -L \
#           -X POST \
#           -H "Accept: application/vnd.github+json" \
#           -H "Authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}" \
#           -H "X-GitHub-Api-Version: 2022-11-28" \
#           https://api.github.com/repos/dangde-afk/deloy_a_web/dependency-graph/snapshots/
#           -d@dependency-snapshot.json
#           -d '{"version": "1.0.0"}'

# -----------------------------------------------------------------------------------------------------------------------


name: Java CI/CD with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} << EOF
            echo "ðŸ”§ Logging into Docker Hub..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            echo "ðŸ›‘ Stopping and removing old container..."
            docker stop myapp-container || true
            docker rm myapp-container || true

            echo "ðŸ§¹ Removing old image..."
            docker rmi ${{ secrets.DOCKER_USERNAME }}/myapp:latest || true

            echo "ðŸ“¥ Pulling new Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest

            echo "ðŸš€ Starting new container..."
            docker run -d --name myapp-container -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/myapp:latest

            echo "âœ… Deployment completed"
          EOF