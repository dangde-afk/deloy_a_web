# # This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# name: Java CI with Maven

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up JDK 17
#       uses: actions/setup-java@v4
#       with:
#         java-version: '17'
#         distribution: 'temurin'
#         cache: maven
#     - name: Build with Maven
#       run: mvn -B package --file pom.xml
    
#       #set output
#     - name: Set output
#       run: echo "version=1.0.0" >> $GITHUB_OUTPUT
#       id: example

#     # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#     - name: Update dependency graph
#       uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

#     # Optional: Uploads the dependency snapshot to GitHub to improve the quality of Dependabot alerts this repository can receive
#     - name: Submit dependency snapshot
#       run: |
#         curl -L \
#           -X POST \
#           -H "Accept: application/vnd.github+json" \
#           -H "Authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}" \
#           -H "X-GitHub-Api-Version: 2022-11-28" \
#           https://api.github.com/repos/dangde-afk/deloy_a_web/dependency-graph/snapshots/
#           -d@dependency-snapshot.json
#           -d '{"version": "1.0.0"}'


name: Java CI/CD with Maven and SSH Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: target/*.jar

      - name: Submit dependency snapshot (optional)
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/dangde-afk/deloy_a_web/dependency-graph/snapshots \
            -d '{
              "version": 0,
              "sha": "${{ github.sha }}",
              "ref": "refs/heads/main",
              "job": {
                "correlator": "ci-build",
                "id": "${{ github.run_id }}"
              },
              "detector": {
                "name": "maven-dependency-detector",
                "version": "1.0.0",
                "url": "${{ github.repositoryUrl }}"
              },
              "scanned": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "manifests": {
                "pom.xml": {
                  "name": "pom.xml",
                  "file": {
                    "source_location": "pom.xml"
                  },
                  "resolved": {
                    "org.springframework.boot:spring-boot-starter-web": {
                      "package_url": "pkg:maven/org.springframework.boot/spring-boot-starter-web@3.5.3"
                    }
                  }
                }
              }
            }'

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar
          path: .

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server via SSH
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
            PROJECT_DIR="/home/${{ secrets.USERNAME }}/myapp"
            mkdir -p $PROJECT_DIR
            cd $PROJECT_DIR

            # Dừng app cũ nếu đang chạy
            pkill -f 'java' || true

            # Xóa file cũ
            rm -f app.jar
          EOF

          # Upload file .jar từ CI lên VPS
          scp *.jar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.USERNAME }}/myapp/app.jar

          
          # Khởi động app
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
            cd /home/${{ secrets.USERNAME }}/myapp
            nohup java -jar app.jar > app.log 2>&1 &
          EOF
